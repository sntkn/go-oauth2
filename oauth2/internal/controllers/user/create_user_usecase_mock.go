// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"github.com/sntkn/go-oauth2/oauth2/internal/repository"
	"sync"
)

// Ensure, that CreateUserUsecaseMock does implement CreateUserUsecase.
// If this is not the case, regenerate this file with moq.
var _ CreateUserUsecase = &CreateUserUsecaseMock{}

// CreateUserUsecaseMock is a mock implementation of CreateUserUsecase.
//
//	func TestSomethingThatUsesCreateUserUsecase(t *testing.T) {
//
//		// make and configure a mocked CreateUserUsecase
//		mockedCreateUserUsecase := &CreateUserUsecaseMock{
//			InvokeFunc: func(user *repository.User) error {
//				panic("mock out the Invoke method")
//			},
//		}
//
//		// use mockedCreateUserUsecase in code that requires CreateUserUsecase
//		// and then make assertions.
//
//	}
type CreateUserUsecaseMock struct {
	// InvokeFunc mocks the Invoke method.
	InvokeFunc func(user *repository.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Invoke holds details about calls to the Invoke method.
		Invoke []struct {
			// User is the user argument value.
			User *repository.User
		}
	}
	lockInvoke sync.RWMutex
}

// Invoke calls InvokeFunc.
func (mock *CreateUserUsecaseMock) Invoke(user *repository.User) error {
	if mock.InvokeFunc == nil {
		panic("CreateUserUsecaseMock.InvokeFunc: method is nil but CreateUserUsecase.Invoke was just called")
	}
	callInfo := struct {
		User *repository.User
	}{
		User: user,
	}
	mock.lockInvoke.Lock()
	mock.calls.Invoke = append(mock.calls.Invoke, callInfo)
	mock.lockInvoke.Unlock()
	return mock.InvokeFunc(user)
}

// InvokeCalls gets all the calls that were made to Invoke.
// Check the length with:
//
//	len(mockedCreateUserUsecase.InvokeCalls())
func (mock *CreateUserUsecaseMock) InvokeCalls() []struct {
	User *repository.User
} {
	var calls []struct {
		User *repository.User
	}
	mock.lockInvoke.RLock()
	calls = mock.calls.Invoke
	mock.lockInvoke.RUnlock()
	return calls
}
