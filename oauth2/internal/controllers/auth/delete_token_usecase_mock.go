// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"sync"
)

// Ensure, that DeleteTokenUsecaseMock does implement DeleteTokenUsecase.
// If this is not the case, regenerate this file with moq.
var _ DeleteTokenUsecase = &DeleteTokenUsecaseMock{}

// DeleteTokenUsecaseMock is a mock implementation of DeleteTokenUsecase.
//
//	func TestSomethingThatUsesDeleteTokenUsecase(t *testing.T) {
//
//		// make and configure a mocked DeleteTokenUsecase
//		mockedDeleteTokenUsecase := &DeleteTokenUsecaseMock{
//			InvokeFunc: func(tokenStr string) error {
//				panic("mock out the Invoke method")
//			},
//		}
//
//		// use mockedDeleteTokenUsecase in code that requires DeleteTokenUsecase
//		// and then make assertions.
//
//	}
type DeleteTokenUsecaseMock struct {
	// InvokeFunc mocks the Invoke method.
	InvokeFunc func(tokenStr string) error

	// calls tracks calls to the methods.
	calls struct {
		// Invoke holds details about calls to the Invoke method.
		Invoke []struct {
			// TokenStr is the tokenStr argument value.
			TokenStr string
		}
	}
	lockInvoke sync.RWMutex
}

// Invoke calls InvokeFunc.
func (mock *DeleteTokenUsecaseMock) Invoke(tokenStr string) error {
	if mock.InvokeFunc == nil {
		panic("DeleteTokenUsecaseMock.InvokeFunc: method is nil but DeleteTokenUsecase.Invoke was just called")
	}
	callInfo := struct {
		TokenStr string
	}{
		TokenStr: tokenStr,
	}
	mock.lockInvoke.Lock()
	mock.calls.Invoke = append(mock.calls.Invoke, callInfo)
	mock.lockInvoke.Unlock()
	return mock.InvokeFunc(tokenStr)
}

// InvokeCalls gets all the calls that were made to Invoke.
// Check the length with:
//
//	len(mockedDeleteTokenUsecase.InvokeCalls())
func (mock *DeleteTokenUsecaseMock) InvokeCalls() []struct {
	TokenStr string
} {
	var calls []struct {
		TokenStr string
	}
	mock.lockInvoke.RLock()
	calls = mock.calls.Invoke
	mock.lockInvoke.RUnlock()
	return calls
}
