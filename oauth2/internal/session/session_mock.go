// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package session

import (
	"context"
	"sync"
	"time"
)

// Ensure, that RedisClientMock does implement RedisClient.
// If this is not the case, regenerate this file with moq.
var _ RedisClient = &RedisClientMock{}

// RedisClientMock is a mock implementation of RedisClient.
//
//	func TestSomethingThatUsesRedisClient(t *testing.T) {
//
//		// make and configure a mocked RedisClient
//		mockedRedisClient := &RedisClientMock{
//			DelFunc: func(ctx context.Context, key string) error {
//				panic("mock out the Del method")
//			},
//			GetFunc: func(ctx context.Context, key string) ([]byte, error) {
//				panic("mock out the Get method")
//			},
//			GetOrNilFunc: func(ctx context.Context, key string) ([]byte, error) {
//				panic("mock out the GetOrNil method")
//			},
//			SetFunc: func(ctx context.Context, key string, value any, expiration time.Duration) error {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedRedisClient in code that requires RedisClient
//		// and then make assertions.
//
//	}
type RedisClientMock struct {
	// DelFunc mocks the Del method.
	DelFunc func(ctx context.Context, key string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key string) ([]byte, error)

	// GetOrNilFunc mocks the GetOrNil method.
	GetOrNilFunc func(ctx context.Context, key string) ([]byte, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, key string, value any, expiration time.Duration) error

	// calls tracks calls to the methods.
	calls struct {
		// Del holds details about calls to the Del method.
		Del []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetOrNil holds details about calls to the GetOrNil method.
		GetOrNil []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value any
			// Expiration is the expiration argument value.
			Expiration time.Duration
		}
	}
	lockDel      sync.RWMutex
	lockGet      sync.RWMutex
	lockGetOrNil sync.RWMutex
	lockSet      sync.RWMutex
}

// Del calls DelFunc.
func (mock *RedisClientMock) Del(ctx context.Context, key string) error {
	if mock.DelFunc == nil {
		panic("RedisClientMock.DelFunc: method is nil but RedisClient.Del was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDel.Lock()
	mock.calls.Del = append(mock.calls.Del, callInfo)
	mock.lockDel.Unlock()
	return mock.DelFunc(ctx, key)
}

// DelCalls gets all the calls that were made to Del.
// Check the length with:
//
//	len(mockedRedisClient.DelCalls())
func (mock *RedisClientMock) DelCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDel.RLock()
	calls = mock.calls.Del
	mock.lockDel.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RedisClientMock) Get(ctx context.Context, key string) ([]byte, error) {
	if mock.GetFunc == nil {
		panic("RedisClientMock.GetFunc: method is nil but RedisClient.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRedisClient.GetCalls())
func (mock *RedisClientMock) GetCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetOrNil calls GetOrNilFunc.
func (mock *RedisClientMock) GetOrNil(ctx context.Context, key string) ([]byte, error) {
	if mock.GetOrNilFunc == nil {
		panic("RedisClientMock.GetOrNilFunc: method is nil but RedisClient.GetOrNil was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetOrNil.Lock()
	mock.calls.GetOrNil = append(mock.calls.GetOrNil, callInfo)
	mock.lockGetOrNil.Unlock()
	return mock.GetOrNilFunc(ctx, key)
}

// GetOrNilCalls gets all the calls that were made to GetOrNil.
// Check the length with:
//
//	len(mockedRedisClient.GetOrNilCalls())
func (mock *RedisClientMock) GetOrNilCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetOrNil.RLock()
	calls = mock.calls.GetOrNil
	mock.lockGetOrNil.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *RedisClientMock) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	if mock.SetFunc == nil {
		panic("RedisClientMock.SetFunc: method is nil but RedisClient.Set was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Key        string
		Value      any
		Expiration time.Duration
	}{
		Ctx:        ctx,
		Key:        key,
		Value:      value,
		Expiration: expiration,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, key, value, expiration)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedRedisClient.SetCalls())
func (mock *RedisClientMock) SetCalls() []struct {
	Ctx        context.Context
	Key        string
	Value      any
	Expiration time.Duration
} {
	var calls []struct {
		Ctx        context.Context
		Key        string
		Value      any
		Expiration time.Duration
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
