// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package accesstoken

import (
	"sync"
)

// Ensure, that GeneratorMock does implement Generator.
// If this is not the case, regenerate this file with moq.
var _ Generator = &GeneratorMock{}

// GeneratorMock is a mock implementation of Generator.
//
//	func TestSomethingThatUsesGenerator(t *testing.T) {
//
//		// make and configure a mocked Generator
//		mockedGenerator := &GeneratorMock{
//			GenerateFunc: func(p *TokenParams, privateKeyBase64 string) (string, error) {
//				panic("mock out the Generate method")
//			},
//		}
//
//		// use mockedGenerator in code that requires Generator
//		// and then make assertions.
//
//	}
type GeneratorMock struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func(p *TokenParams, privateKeyBase64 string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
			// P is the p argument value.
			P *TokenParams
			// PrivateKeyBase64 is the privateKeyBase64 argument value.
			PrivateKeyBase64 string
		}
	}
	lockGenerate sync.RWMutex
}

// Generate calls GenerateFunc.
func (mock *GeneratorMock) Generate(p *TokenParams, privateKeyBase64 string) (string, error) {
	if mock.GenerateFunc == nil {
		panic("GeneratorMock.GenerateFunc: method is nil but Generator.Generate was just called")
	}
	callInfo := struct {
		P                *TokenParams
		PrivateKeyBase64 string
	}{
		P:                p,
		PrivateKeyBase64: privateKeyBase64,
	}
	mock.lockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	mock.lockGenerate.Unlock()
	return mock.GenerateFunc(p, privateKeyBase64)
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//
//	len(mockedGenerator.GenerateCalls())
func (mock *GeneratorMock) GenerateCalls() []struct {
	P                *TokenParams
	PrivateKeyBase64 string
} {
	var calls []struct {
		P                *TokenParams
		PrivateKeyBase64 string
	}
	mock.lockGenerate.RLock()
	calls = mock.calls.Generate
	mock.lockGenerate.RUnlock()
	return calls
}

// Ensure, that ParserMock does implement Parser.
// If this is not the case, regenerate this file with moq.
var _ Parser = &ParserMock{}

// ParserMock is a mock implementation of Parser.
//
//	func TestSomethingThatUsesParser(t *testing.T) {
//
//		// make and configure a mocked Parser
//		mockedParser := &ParserMock{
//			ParseFunc: func(tokenStr string, publicKeyBase64 string) (*CustomClaims, error) {
//				panic("mock out the Parse method")
//			},
//		}
//
//		// use mockedParser in code that requires Parser
//		// and then make assertions.
//
//	}
type ParserMock struct {
	// ParseFunc mocks the Parse method.
	ParseFunc func(tokenStr string, publicKeyBase64 string) (*CustomClaims, error)

	// calls tracks calls to the methods.
	calls struct {
		// Parse holds details about calls to the Parse method.
		Parse []struct {
			// TokenStr is the tokenStr argument value.
			TokenStr string
			// PublicKeyBase64 is the publicKeyBase64 argument value.
			PublicKeyBase64 string
		}
	}
	lockParse sync.RWMutex
}

// Parse calls ParseFunc.
func (mock *ParserMock) Parse(tokenStr string, publicKeyBase64 string) (*CustomClaims, error) {
	if mock.ParseFunc == nil {
		panic("ParserMock.ParseFunc: method is nil but Parser.Parse was just called")
	}
	callInfo := struct {
		TokenStr        string
		PublicKeyBase64 string
	}{
		TokenStr:        tokenStr,
		PublicKeyBase64: publicKeyBase64,
	}
	mock.lockParse.Lock()
	mock.calls.Parse = append(mock.calls.Parse, callInfo)
	mock.lockParse.Unlock()
	return mock.ParseFunc(tokenStr, publicKeyBase64)
}

// ParseCalls gets all the calls that were made to Parse.
// Check the length with:
//
//	len(mockedParser.ParseCalls())
func (mock *ParserMock) ParseCalls() []struct {
	TokenStr        string
	PublicKeyBase64 string
} {
	var calls []struct {
		TokenStr        string
		PublicKeyBase64 string
	}
	mock.lockParse.RLock()
	calls = mock.calls.Parse
	mock.lockParse.RUnlock()
	return calls
}
