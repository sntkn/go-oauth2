// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package session

import (
	"github.com/gin-gonic/gin"
	"sync"
)

// Ensure, that SessionClientMock does implement SessionClient.
// If this is not the case, regenerate this file with moq.
var _ SessionClient = &SessionClientMock{}

// SessionClientMock is a mock implementation of SessionClient.
//
//	func TestSomethingThatUsesSessionClient(t *testing.T) {
//
//		// make and configure a mocked SessionClient
//		mockedSessionClient := &SessionClientMock{
//			DelSessionDataFunc: func(c *gin.Context, key string) error {
//				panic("mock out the DelSessionData method")
//			},
//			FlushNamedSessionDataFunc: func(c *gin.Context, key string, t any) error {
//				panic("mock out the FlushNamedSessionData method")
//			},
//			GetNamedSessionDataFunc: func(c *gin.Context, key string, t any) error {
//				panic("mock out the GetNamedSessionData method")
//			},
//			GetSessionDataFunc: func(c *gin.Context, key string) (string, error) {
//				panic("mock out the GetSessionData method")
//			},
//			PullSessionDataFunc: func(c *gin.Context, key string) (string, error) {
//				panic("mock out the PullSessionData method")
//			},
//			SetNamedSessionDataFunc: func(c *gin.Context, key string, v any) error {
//				panic("mock out the SetNamedSessionData method")
//			},
//			SetSessionDataFunc: func(c *gin.Context, key string, input string) error {
//				panic("mock out the SetSessionData method")
//			},
//		}
//
//		// use mockedSessionClient in code that requires SessionClient
//		// and then make assertions.
//
//	}
type SessionClientMock struct {
	// DelSessionDataFunc mocks the DelSessionData method.
	DelSessionDataFunc func(c *gin.Context, key string) error

	// FlushNamedSessionDataFunc mocks the FlushNamedSessionData method.
	FlushNamedSessionDataFunc func(c *gin.Context, key string, t any) error

	// GetNamedSessionDataFunc mocks the GetNamedSessionData method.
	GetNamedSessionDataFunc func(c *gin.Context, key string, t any) error

	// GetSessionDataFunc mocks the GetSessionData method.
	GetSessionDataFunc func(c *gin.Context, key string) (string, error)

	// PullSessionDataFunc mocks the PullSessionData method.
	PullSessionDataFunc func(c *gin.Context, key string) (string, error)

	// SetNamedSessionDataFunc mocks the SetNamedSessionData method.
	SetNamedSessionDataFunc func(c *gin.Context, key string, v any) error

	// SetSessionDataFunc mocks the SetSessionData method.
	SetSessionDataFunc func(c *gin.Context, key string, input string) error

	// calls tracks calls to the methods.
	calls struct {
		// DelSessionData holds details about calls to the DelSessionData method.
		DelSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
		}
		// FlushNamedSessionData holds details about calls to the FlushNamedSessionData method.
		FlushNamedSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
			// T is the t argument value.
			T any
		}
		// GetNamedSessionData holds details about calls to the GetNamedSessionData method.
		GetNamedSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
			// T is the t argument value.
			T any
		}
		// GetSessionData holds details about calls to the GetSessionData method.
		GetSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
		}
		// PullSessionData holds details about calls to the PullSessionData method.
		PullSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
		}
		// SetNamedSessionData holds details about calls to the SetNamedSessionData method.
		SetNamedSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
			// V is the v argument value.
			V any
		}
		// SetSessionData holds details about calls to the SetSessionData method.
		SetSessionData []struct {
			// C is the c argument value.
			C *gin.Context
			// Key is the key argument value.
			Key string
			// Input is the input argument value.
			Input string
		}
	}
	lockDelSessionData        sync.RWMutex
	lockFlushNamedSessionData sync.RWMutex
	lockGetNamedSessionData   sync.RWMutex
	lockGetSessionData        sync.RWMutex
	lockPullSessionData       sync.RWMutex
	lockSetNamedSessionData   sync.RWMutex
	lockSetSessionData        sync.RWMutex
}

// DelSessionData calls DelSessionDataFunc.
func (mock *SessionClientMock) DelSessionData(c *gin.Context, key string) error {
	if mock.DelSessionDataFunc == nil {
		panic("SessionClientMock.DelSessionDataFunc: method is nil but SessionClient.DelSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
	}{
		C:   c,
		Key: key,
	}
	mock.lockDelSessionData.Lock()
	mock.calls.DelSessionData = append(mock.calls.DelSessionData, callInfo)
	mock.lockDelSessionData.Unlock()
	return mock.DelSessionDataFunc(c, key)
}

// DelSessionDataCalls gets all the calls that were made to DelSessionData.
// Check the length with:
//
//	len(mockedSessionClient.DelSessionDataCalls())
func (mock *SessionClientMock) DelSessionDataCalls() []struct {
	C   *gin.Context
	Key string
} {
	var calls []struct {
		C   *gin.Context
		Key string
	}
	mock.lockDelSessionData.RLock()
	calls = mock.calls.DelSessionData
	mock.lockDelSessionData.RUnlock()
	return calls
}

// FlushNamedSessionData calls FlushNamedSessionDataFunc.
func (mock *SessionClientMock) FlushNamedSessionData(c *gin.Context, key string, t any) error {
	if mock.FlushNamedSessionDataFunc == nil {
		panic("SessionClientMock.FlushNamedSessionDataFunc: method is nil but SessionClient.FlushNamedSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
		T   any
	}{
		C:   c,
		Key: key,
		T:   t,
	}
	mock.lockFlushNamedSessionData.Lock()
	mock.calls.FlushNamedSessionData = append(mock.calls.FlushNamedSessionData, callInfo)
	mock.lockFlushNamedSessionData.Unlock()
	return mock.FlushNamedSessionDataFunc(c, key, t)
}

// FlushNamedSessionDataCalls gets all the calls that were made to FlushNamedSessionData.
// Check the length with:
//
//	len(mockedSessionClient.FlushNamedSessionDataCalls())
func (mock *SessionClientMock) FlushNamedSessionDataCalls() []struct {
	C   *gin.Context
	Key string
	T   any
} {
	var calls []struct {
		C   *gin.Context
		Key string
		T   any
	}
	mock.lockFlushNamedSessionData.RLock()
	calls = mock.calls.FlushNamedSessionData
	mock.lockFlushNamedSessionData.RUnlock()
	return calls
}

// GetNamedSessionData calls GetNamedSessionDataFunc.
func (mock *SessionClientMock) GetNamedSessionData(c *gin.Context, key string, t any) error {
	if mock.GetNamedSessionDataFunc == nil {
		panic("SessionClientMock.GetNamedSessionDataFunc: method is nil but SessionClient.GetNamedSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
		T   any
	}{
		C:   c,
		Key: key,
		T:   t,
	}
	mock.lockGetNamedSessionData.Lock()
	mock.calls.GetNamedSessionData = append(mock.calls.GetNamedSessionData, callInfo)
	mock.lockGetNamedSessionData.Unlock()
	return mock.GetNamedSessionDataFunc(c, key, t)
}

// GetNamedSessionDataCalls gets all the calls that were made to GetNamedSessionData.
// Check the length with:
//
//	len(mockedSessionClient.GetNamedSessionDataCalls())
func (mock *SessionClientMock) GetNamedSessionDataCalls() []struct {
	C   *gin.Context
	Key string
	T   any
} {
	var calls []struct {
		C   *gin.Context
		Key string
		T   any
	}
	mock.lockGetNamedSessionData.RLock()
	calls = mock.calls.GetNamedSessionData
	mock.lockGetNamedSessionData.RUnlock()
	return calls
}

// GetSessionData calls GetSessionDataFunc.
func (mock *SessionClientMock) GetSessionData(c *gin.Context, key string) (string, error) {
	if mock.GetSessionDataFunc == nil {
		panic("SessionClientMock.GetSessionDataFunc: method is nil but SessionClient.GetSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
	}{
		C:   c,
		Key: key,
	}
	mock.lockGetSessionData.Lock()
	mock.calls.GetSessionData = append(mock.calls.GetSessionData, callInfo)
	mock.lockGetSessionData.Unlock()
	return mock.GetSessionDataFunc(c, key)
}

// GetSessionDataCalls gets all the calls that were made to GetSessionData.
// Check the length with:
//
//	len(mockedSessionClient.GetSessionDataCalls())
func (mock *SessionClientMock) GetSessionDataCalls() []struct {
	C   *gin.Context
	Key string
} {
	var calls []struct {
		C   *gin.Context
		Key string
	}
	mock.lockGetSessionData.RLock()
	calls = mock.calls.GetSessionData
	mock.lockGetSessionData.RUnlock()
	return calls
}

// PullSessionData calls PullSessionDataFunc.
func (mock *SessionClientMock) PullSessionData(c *gin.Context, key string) (string, error) {
	if mock.PullSessionDataFunc == nil {
		panic("SessionClientMock.PullSessionDataFunc: method is nil but SessionClient.PullSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
	}{
		C:   c,
		Key: key,
	}
	mock.lockPullSessionData.Lock()
	mock.calls.PullSessionData = append(mock.calls.PullSessionData, callInfo)
	mock.lockPullSessionData.Unlock()
	return mock.PullSessionDataFunc(c, key)
}

// PullSessionDataCalls gets all the calls that were made to PullSessionData.
// Check the length with:
//
//	len(mockedSessionClient.PullSessionDataCalls())
func (mock *SessionClientMock) PullSessionDataCalls() []struct {
	C   *gin.Context
	Key string
} {
	var calls []struct {
		C   *gin.Context
		Key string
	}
	mock.lockPullSessionData.RLock()
	calls = mock.calls.PullSessionData
	mock.lockPullSessionData.RUnlock()
	return calls
}

// SetNamedSessionData calls SetNamedSessionDataFunc.
func (mock *SessionClientMock) SetNamedSessionData(c *gin.Context, key string, v any) error {
	if mock.SetNamedSessionDataFunc == nil {
		panic("SessionClientMock.SetNamedSessionDataFunc: method is nil but SessionClient.SetNamedSessionData was just called")
	}
	callInfo := struct {
		C   *gin.Context
		Key string
		V   any
	}{
		C:   c,
		Key: key,
		V:   v,
	}
	mock.lockSetNamedSessionData.Lock()
	mock.calls.SetNamedSessionData = append(mock.calls.SetNamedSessionData, callInfo)
	mock.lockSetNamedSessionData.Unlock()
	return mock.SetNamedSessionDataFunc(c, key, v)
}

// SetNamedSessionDataCalls gets all the calls that were made to SetNamedSessionData.
// Check the length with:
//
//	len(mockedSessionClient.SetNamedSessionDataCalls())
func (mock *SessionClientMock) SetNamedSessionDataCalls() []struct {
	C   *gin.Context
	Key string
	V   any
} {
	var calls []struct {
		C   *gin.Context
		Key string
		V   any
	}
	mock.lockSetNamedSessionData.RLock()
	calls = mock.calls.SetNamedSessionData
	mock.lockSetNamedSessionData.RUnlock()
	return calls
}

// SetSessionData calls SetSessionDataFunc.
func (mock *SessionClientMock) SetSessionData(c *gin.Context, key string, input string) error {
	if mock.SetSessionDataFunc == nil {
		panic("SessionClientMock.SetSessionDataFunc: method is nil but SessionClient.SetSessionData was just called")
	}
	callInfo := struct {
		C     *gin.Context
		Key   string
		Input string
	}{
		C:     c,
		Key:   key,
		Input: input,
	}
	mock.lockSetSessionData.Lock()
	mock.calls.SetSessionData = append(mock.calls.SetSessionData, callInfo)
	mock.lockSetSessionData.Unlock()
	return mock.SetSessionDataFunc(c, key, input)
}

// SetSessionDataCalls gets all the calls that were made to SetSessionData.
// Check the length with:
//
//	len(mockedSessionClient.SetSessionDataCalls())
func (mock *SessionClientMock) SetSessionDataCalls() []struct {
	C     *gin.Context
	Key   string
	Input string
} {
	var calls []struct {
		C     *gin.Context
		Key   string
		Input string
	}
	mock.lockSetSessionData.RLock()
	calls = mock.calls.SetSessionData
	mock.lockSetSessionData.RUnlock()
	return calls
}
