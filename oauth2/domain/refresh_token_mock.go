// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
	"time"
)

// Ensure, that RefreshTokenMock does implement RefreshToken.
// If this is not the case, regenerate this file with moq.
var _ RefreshToken = &RefreshTokenMock{}

// RefreshTokenMock is a mock implementation of RefreshToken.
//
//	func TestSomethingThatUsesRefreshToken(t *testing.T) {
//
//		// make and configure a mocked RefreshToken
//		mockedRefreshToken := &RefreshTokenMock{
//			ExpiryFunc: func() int64 {
//				panic("mock out the Expiry method")
//			},
//			GetAccessTokenFunc: func() string {
//				panic("mock out the GetAccessToken method")
//			},
//			GetExpiresAtFunc: func() time.Time {
//				panic("mock out the GetExpiresAt method")
//			},
//			GetRefreshTokenFunc: func() string {
//				panic("mock out the GetRefreshToken method")
//			},
//			IsNotFoundFunc: func() bool {
//				panic("mock out the IsNotFound method")
//			},
//			SetNewExpiryFunc: func(additionalDays int)  {
//				panic("mock out the SetNewExpiry method")
//			},
//			SetNewRefreshTokenFunc: func() error {
//				panic("mock out the SetNewRefreshToken method")
//			},
//		}
//
//		// use mockedRefreshToken in code that requires RefreshToken
//		// and then make assertions.
//
//	}
type RefreshTokenMock struct {
	// ExpiryFunc mocks the Expiry method.
	ExpiryFunc func() int64

	// GetAccessTokenFunc mocks the GetAccessToken method.
	GetAccessTokenFunc func() string

	// GetExpiresAtFunc mocks the GetExpiresAt method.
	GetExpiresAtFunc func() time.Time

	// GetRefreshTokenFunc mocks the GetRefreshToken method.
	GetRefreshTokenFunc func() string

	// IsNotFoundFunc mocks the IsNotFound method.
	IsNotFoundFunc func() bool

	// SetNewExpiryFunc mocks the SetNewExpiry method.
	SetNewExpiryFunc func(additionalDays int)

	// SetNewRefreshTokenFunc mocks the SetNewRefreshToken method.
	SetNewRefreshTokenFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Expiry holds details about calls to the Expiry method.
		Expiry []struct {
		}
		// GetAccessToken holds details about calls to the GetAccessToken method.
		GetAccessToken []struct {
		}
		// GetExpiresAt holds details about calls to the GetExpiresAt method.
		GetExpiresAt []struct {
		}
		// GetRefreshToken holds details about calls to the GetRefreshToken method.
		GetRefreshToken []struct {
		}
		// IsNotFound holds details about calls to the IsNotFound method.
		IsNotFound []struct {
		}
		// SetNewExpiry holds details about calls to the SetNewExpiry method.
		SetNewExpiry []struct {
			// AdditionalDays is the additionalDays argument value.
			AdditionalDays int
		}
		// SetNewRefreshToken holds details about calls to the SetNewRefreshToken method.
		SetNewRefreshToken []struct {
		}
	}
	lockExpiry             sync.RWMutex
	lockGetAccessToken     sync.RWMutex
	lockGetExpiresAt       sync.RWMutex
	lockGetRefreshToken    sync.RWMutex
	lockIsNotFound         sync.RWMutex
	lockSetNewExpiry       sync.RWMutex
	lockSetNewRefreshToken sync.RWMutex
}

// Expiry calls ExpiryFunc.
func (mock *RefreshTokenMock) Expiry() int64 {
	if mock.ExpiryFunc == nil {
		panic("RefreshTokenMock.ExpiryFunc: method is nil but RefreshToken.Expiry was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExpiry.Lock()
	mock.calls.Expiry = append(mock.calls.Expiry, callInfo)
	mock.lockExpiry.Unlock()
	return mock.ExpiryFunc()
}

// ExpiryCalls gets all the calls that were made to Expiry.
// Check the length with:
//
//	len(mockedRefreshToken.ExpiryCalls())
func (mock *RefreshTokenMock) ExpiryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockExpiry.RLock()
	calls = mock.calls.Expiry
	mock.lockExpiry.RUnlock()
	return calls
}

// GetAccessToken calls GetAccessTokenFunc.
func (mock *RefreshTokenMock) GetAccessToken() string {
	if mock.GetAccessTokenFunc == nil {
		panic("RefreshTokenMock.GetAccessTokenFunc: method is nil but RefreshToken.GetAccessToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAccessToken.Lock()
	mock.calls.GetAccessToken = append(mock.calls.GetAccessToken, callInfo)
	mock.lockGetAccessToken.Unlock()
	return mock.GetAccessTokenFunc()
}

// GetAccessTokenCalls gets all the calls that were made to GetAccessToken.
// Check the length with:
//
//	len(mockedRefreshToken.GetAccessTokenCalls())
func (mock *RefreshTokenMock) GetAccessTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAccessToken.RLock()
	calls = mock.calls.GetAccessToken
	mock.lockGetAccessToken.RUnlock()
	return calls
}

// GetExpiresAt calls GetExpiresAtFunc.
func (mock *RefreshTokenMock) GetExpiresAt() time.Time {
	if mock.GetExpiresAtFunc == nil {
		panic("RefreshTokenMock.GetExpiresAtFunc: method is nil but RefreshToken.GetExpiresAt was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetExpiresAt.Lock()
	mock.calls.GetExpiresAt = append(mock.calls.GetExpiresAt, callInfo)
	mock.lockGetExpiresAt.Unlock()
	return mock.GetExpiresAtFunc()
}

// GetExpiresAtCalls gets all the calls that were made to GetExpiresAt.
// Check the length with:
//
//	len(mockedRefreshToken.GetExpiresAtCalls())
func (mock *RefreshTokenMock) GetExpiresAtCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetExpiresAt.RLock()
	calls = mock.calls.GetExpiresAt
	mock.lockGetExpiresAt.RUnlock()
	return calls
}

// GetRefreshToken calls GetRefreshTokenFunc.
func (mock *RefreshTokenMock) GetRefreshToken() string {
	if mock.GetRefreshTokenFunc == nil {
		panic("RefreshTokenMock.GetRefreshTokenFunc: method is nil but RefreshToken.GetRefreshToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRefreshToken.Lock()
	mock.calls.GetRefreshToken = append(mock.calls.GetRefreshToken, callInfo)
	mock.lockGetRefreshToken.Unlock()
	return mock.GetRefreshTokenFunc()
}

// GetRefreshTokenCalls gets all the calls that were made to GetRefreshToken.
// Check the length with:
//
//	len(mockedRefreshToken.GetRefreshTokenCalls())
func (mock *RefreshTokenMock) GetRefreshTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRefreshToken.RLock()
	calls = mock.calls.GetRefreshToken
	mock.lockGetRefreshToken.RUnlock()
	return calls
}

// IsNotFound calls IsNotFoundFunc.
func (mock *RefreshTokenMock) IsNotFound() bool {
	if mock.IsNotFoundFunc == nil {
		panic("RefreshTokenMock.IsNotFoundFunc: method is nil but RefreshToken.IsNotFound was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsNotFound.Lock()
	mock.calls.IsNotFound = append(mock.calls.IsNotFound, callInfo)
	mock.lockIsNotFound.Unlock()
	return mock.IsNotFoundFunc()
}

// IsNotFoundCalls gets all the calls that were made to IsNotFound.
// Check the length with:
//
//	len(mockedRefreshToken.IsNotFoundCalls())
func (mock *RefreshTokenMock) IsNotFoundCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsNotFound.RLock()
	calls = mock.calls.IsNotFound
	mock.lockIsNotFound.RUnlock()
	return calls
}

// SetNewExpiry calls SetNewExpiryFunc.
func (mock *RefreshTokenMock) SetNewExpiry(additionalDays int) {
	if mock.SetNewExpiryFunc == nil {
		panic("RefreshTokenMock.SetNewExpiryFunc: method is nil but RefreshToken.SetNewExpiry was just called")
	}
	callInfo := struct {
		AdditionalDays int
	}{
		AdditionalDays: additionalDays,
	}
	mock.lockSetNewExpiry.Lock()
	mock.calls.SetNewExpiry = append(mock.calls.SetNewExpiry, callInfo)
	mock.lockSetNewExpiry.Unlock()
	mock.SetNewExpiryFunc(additionalDays)
}

// SetNewExpiryCalls gets all the calls that were made to SetNewExpiry.
// Check the length with:
//
//	len(mockedRefreshToken.SetNewExpiryCalls())
func (mock *RefreshTokenMock) SetNewExpiryCalls() []struct {
	AdditionalDays int
} {
	var calls []struct {
		AdditionalDays int
	}
	mock.lockSetNewExpiry.RLock()
	calls = mock.calls.SetNewExpiry
	mock.lockSetNewExpiry.RUnlock()
	return calls
}

// SetNewRefreshToken calls SetNewRefreshTokenFunc.
func (mock *RefreshTokenMock) SetNewRefreshToken() error {
	if mock.SetNewRefreshTokenFunc == nil {
		panic("RefreshTokenMock.SetNewRefreshTokenFunc: method is nil but RefreshToken.SetNewRefreshToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSetNewRefreshToken.Lock()
	mock.calls.SetNewRefreshToken = append(mock.calls.SetNewRefreshToken, callInfo)
	mock.lockSetNewRefreshToken.Unlock()
	return mock.SetNewRefreshTokenFunc()
}

// SetNewRefreshTokenCalls gets all the calls that were made to SetNewRefreshToken.
// Check the length with:
//
//	len(mockedRefreshToken.SetNewRefreshTokenCalls())
func (mock *RefreshTokenMock) SetNewRefreshTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetNewRefreshToken.RLock()
	calls = mock.calls.SetNewRefreshToken
	mock.lockSetNewRefreshToken.RUnlock()
	return calls
}
