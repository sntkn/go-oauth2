// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that TokenRepositoryMock does implement TokenRepository.
// If this is not the case, regenerate this file with moq.
var _ TokenRepository = &TokenRepositoryMock{}

// TokenRepositoryMock is a mock implementation of TokenRepository.
//
//	func TestSomethingThatUsesTokenRepository(t *testing.T) {
//
//		// make and configure a mocked TokenRepository
//		mockedTokenRepository := &TokenRepositoryMock{
//			FindTokenFunc: func(accessToken string) (Token, error) {
//				panic("mock out the FindToken method")
//			},
//			RevokeTokenFunc: func(accessToken string) error {
//				panic("mock out the RevokeToken method")
//			},
//			StoreTokenFunc: func(token Token) error {
//				panic("mock out the StoreToken method")
//			},
//		}
//
//		// use mockedTokenRepository in code that requires TokenRepository
//		// and then make assertions.
//
//	}
type TokenRepositoryMock struct {
	// FindTokenFunc mocks the FindToken method.
	FindTokenFunc func(accessToken string) (Token, error)

	// RevokeTokenFunc mocks the RevokeToken method.
	RevokeTokenFunc func(accessToken string) error

	// StoreTokenFunc mocks the StoreToken method.
	StoreTokenFunc func(token Token) error

	// calls tracks calls to the methods.
	calls struct {
		// FindToken holds details about calls to the FindToken method.
		FindToken []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// RevokeToken holds details about calls to the RevokeToken method.
		RevokeToken []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// StoreToken holds details about calls to the StoreToken method.
		StoreToken []struct {
			// Token is the token argument value.
			Token Token
		}
	}
	lockFindToken   sync.RWMutex
	lockRevokeToken sync.RWMutex
	lockStoreToken  sync.RWMutex
}

// FindToken calls FindTokenFunc.
func (mock *TokenRepositoryMock) FindToken(accessToken string) (Token, error) {
	if mock.FindTokenFunc == nil {
		panic("TokenRepositoryMock.FindTokenFunc: method is nil but TokenRepository.FindToken was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockFindToken.Lock()
	mock.calls.FindToken = append(mock.calls.FindToken, callInfo)
	mock.lockFindToken.Unlock()
	return mock.FindTokenFunc(accessToken)
}

// FindTokenCalls gets all the calls that were made to FindToken.
// Check the length with:
//
//	len(mockedTokenRepository.FindTokenCalls())
func (mock *TokenRepositoryMock) FindTokenCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockFindToken.RLock()
	calls = mock.calls.FindToken
	mock.lockFindToken.RUnlock()
	return calls
}

// RevokeToken calls RevokeTokenFunc.
func (mock *TokenRepositoryMock) RevokeToken(accessToken string) error {
	if mock.RevokeTokenFunc == nil {
		panic("TokenRepositoryMock.RevokeTokenFunc: method is nil but TokenRepository.RevokeToken was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockRevokeToken.Lock()
	mock.calls.RevokeToken = append(mock.calls.RevokeToken, callInfo)
	mock.lockRevokeToken.Unlock()
	return mock.RevokeTokenFunc(accessToken)
}

// RevokeTokenCalls gets all the calls that were made to RevokeToken.
// Check the length with:
//
//	len(mockedTokenRepository.RevokeTokenCalls())
func (mock *TokenRepositoryMock) RevokeTokenCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockRevokeToken.RLock()
	calls = mock.calls.RevokeToken
	mock.lockRevokeToken.RUnlock()
	return calls
}

// StoreToken calls StoreTokenFunc.
func (mock *TokenRepositoryMock) StoreToken(token Token) error {
	if mock.StoreTokenFunc == nil {
		panic("TokenRepositoryMock.StoreTokenFunc: method is nil but TokenRepository.StoreToken was just called")
	}
	callInfo := struct {
		Token Token
	}{
		Token: token,
	}
	mock.lockStoreToken.Lock()
	mock.calls.StoreToken = append(mock.calls.StoreToken, callInfo)
	mock.lockStoreToken.Unlock()
	return mock.StoreTokenFunc(token)
}

// StoreTokenCalls gets all the calls that were made to StoreToken.
// Check the length with:
//
//	len(mockedTokenRepository.StoreTokenCalls())
func (mock *TokenRepositoryMock) StoreTokenCalls() []struct {
	Token Token
} {
	var calls []struct {
		Token Token
	}
	mock.lockStoreToken.RLock()
	calls = mock.calls.StoreToken
	mock.lockStoreToken.RUnlock()
	return calls
}
