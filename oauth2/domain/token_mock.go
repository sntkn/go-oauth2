// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"github.com/google/uuid"
	"sync"
	"time"
)

// Ensure, that TokenMock does implement Token.
// If this is not the case, regenerate this file with moq.
var _ Token = &TokenMock{}

// TokenMock is a mock implementation of Token.
//
//	func TestSomethingThatUsesToken(t *testing.T) {
//
//		// make and configure a mocked Token
//		mockedToken := &TokenMock{
//			ExpiryFunc: func() int64 {
//				panic("mock out the Expiry method")
//			},
//			GetAccessTokenFunc: func() string {
//				panic("mock out the GetAccessToken method")
//			},
//			GetClientIDFunc: func() uuid.UUID {
//				panic("mock out the GetClientID method")
//			},
//			GetExpiresAtFunc: func() time.Time {
//				panic("mock out the GetExpiresAt method")
//			},
//			GetScopeFunc: func() string {
//				panic("mock out the GetScope method")
//			},
//			GetUserIDFunc: func() uuid.UUID {
//				panic("mock out the GetUserID method")
//			},
//			IsNotFoundFunc: func() bool {
//				panic("mock out the IsNotFound method")
//			},
//			SetNewAccessTokenFunc: func(privateKeyBase64 string) error {
//				panic("mock out the SetNewAccessToken method")
//			},
//			SetNewExpiryFunc: func(additionalMin int)  {
//				panic("mock out the SetNewExpiry method")
//			},
//		}
//
//		// use mockedToken in code that requires Token
//		// and then make assertions.
//
//	}
type TokenMock struct {
	// ExpiryFunc mocks the Expiry method.
	ExpiryFunc func() int64

	// GetAccessTokenFunc mocks the GetAccessToken method.
	GetAccessTokenFunc func() string

	// GetClientIDFunc mocks the GetClientID method.
	GetClientIDFunc func() uuid.UUID

	// GetExpiresAtFunc mocks the GetExpiresAt method.
	GetExpiresAtFunc func() time.Time

	// GetScopeFunc mocks the GetScope method.
	GetScopeFunc func() string

	// GetUserIDFunc mocks the GetUserID method.
	GetUserIDFunc func() uuid.UUID

	// IsNotFoundFunc mocks the IsNotFound method.
	IsNotFoundFunc func() bool

	// SetNewAccessTokenFunc mocks the SetNewAccessToken method.
	SetNewAccessTokenFunc func(privateKeyBase64 string) error

	// SetNewExpiryFunc mocks the SetNewExpiry method.
	SetNewExpiryFunc func(additionalMin int)

	// calls tracks calls to the methods.
	calls struct {
		// Expiry holds details about calls to the Expiry method.
		Expiry []struct {
		}
		// GetAccessToken holds details about calls to the GetAccessToken method.
		GetAccessToken []struct {
		}
		// GetClientID holds details about calls to the GetClientID method.
		GetClientID []struct {
		}
		// GetExpiresAt holds details about calls to the GetExpiresAt method.
		GetExpiresAt []struct {
		}
		// GetScope holds details about calls to the GetScope method.
		GetScope []struct {
		}
		// GetUserID holds details about calls to the GetUserID method.
		GetUserID []struct {
		}
		// IsNotFound holds details about calls to the IsNotFound method.
		IsNotFound []struct {
		}
		// SetNewAccessToken holds details about calls to the SetNewAccessToken method.
		SetNewAccessToken []struct {
			// PrivateKeyBase64 is the privateKeyBase64 argument value.
			PrivateKeyBase64 string
		}
		// SetNewExpiry holds details about calls to the SetNewExpiry method.
		SetNewExpiry []struct {
			// AdditionalMin is the additionalMin argument value.
			AdditionalMin int
		}
	}
	lockExpiry            sync.RWMutex
	lockGetAccessToken    sync.RWMutex
	lockGetClientID       sync.RWMutex
	lockGetExpiresAt      sync.RWMutex
	lockGetScope          sync.RWMutex
	lockGetUserID         sync.RWMutex
	lockIsNotFound        sync.RWMutex
	lockSetNewAccessToken sync.RWMutex
	lockSetNewExpiry      sync.RWMutex
}

// Expiry calls ExpiryFunc.
func (mock *TokenMock) Expiry() int64 {
	if mock.ExpiryFunc == nil {
		panic("TokenMock.ExpiryFunc: method is nil but Token.Expiry was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExpiry.Lock()
	mock.calls.Expiry = append(mock.calls.Expiry, callInfo)
	mock.lockExpiry.Unlock()
	return mock.ExpiryFunc()
}

// ExpiryCalls gets all the calls that were made to Expiry.
// Check the length with:
//
//	len(mockedToken.ExpiryCalls())
func (mock *TokenMock) ExpiryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockExpiry.RLock()
	calls = mock.calls.Expiry
	mock.lockExpiry.RUnlock()
	return calls
}

// GetAccessToken calls GetAccessTokenFunc.
func (mock *TokenMock) GetAccessToken() string {
	if mock.GetAccessTokenFunc == nil {
		panic("TokenMock.GetAccessTokenFunc: method is nil but Token.GetAccessToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAccessToken.Lock()
	mock.calls.GetAccessToken = append(mock.calls.GetAccessToken, callInfo)
	mock.lockGetAccessToken.Unlock()
	return mock.GetAccessTokenFunc()
}

// GetAccessTokenCalls gets all the calls that were made to GetAccessToken.
// Check the length with:
//
//	len(mockedToken.GetAccessTokenCalls())
func (mock *TokenMock) GetAccessTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAccessToken.RLock()
	calls = mock.calls.GetAccessToken
	mock.lockGetAccessToken.RUnlock()
	return calls
}

// GetClientID calls GetClientIDFunc.
func (mock *TokenMock) GetClientID() uuid.UUID {
	if mock.GetClientIDFunc == nil {
		panic("TokenMock.GetClientIDFunc: method is nil but Token.GetClientID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetClientID.Lock()
	mock.calls.GetClientID = append(mock.calls.GetClientID, callInfo)
	mock.lockGetClientID.Unlock()
	return mock.GetClientIDFunc()
}

// GetClientIDCalls gets all the calls that were made to GetClientID.
// Check the length with:
//
//	len(mockedToken.GetClientIDCalls())
func (mock *TokenMock) GetClientIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetClientID.RLock()
	calls = mock.calls.GetClientID
	mock.lockGetClientID.RUnlock()
	return calls
}

// GetExpiresAt calls GetExpiresAtFunc.
func (mock *TokenMock) GetExpiresAt() time.Time {
	if mock.GetExpiresAtFunc == nil {
		panic("TokenMock.GetExpiresAtFunc: method is nil but Token.GetExpiresAt was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetExpiresAt.Lock()
	mock.calls.GetExpiresAt = append(mock.calls.GetExpiresAt, callInfo)
	mock.lockGetExpiresAt.Unlock()
	return mock.GetExpiresAtFunc()
}

// GetExpiresAtCalls gets all the calls that were made to GetExpiresAt.
// Check the length with:
//
//	len(mockedToken.GetExpiresAtCalls())
func (mock *TokenMock) GetExpiresAtCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetExpiresAt.RLock()
	calls = mock.calls.GetExpiresAt
	mock.lockGetExpiresAt.RUnlock()
	return calls
}

// GetScope calls GetScopeFunc.
func (mock *TokenMock) GetScope() string {
	if mock.GetScopeFunc == nil {
		panic("TokenMock.GetScopeFunc: method is nil but Token.GetScope was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetScope.Lock()
	mock.calls.GetScope = append(mock.calls.GetScope, callInfo)
	mock.lockGetScope.Unlock()
	return mock.GetScopeFunc()
}

// GetScopeCalls gets all the calls that were made to GetScope.
// Check the length with:
//
//	len(mockedToken.GetScopeCalls())
func (mock *TokenMock) GetScopeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetScope.RLock()
	calls = mock.calls.GetScope
	mock.lockGetScope.RUnlock()
	return calls
}

// GetUserID calls GetUserIDFunc.
func (mock *TokenMock) GetUserID() uuid.UUID {
	if mock.GetUserIDFunc == nil {
		panic("TokenMock.GetUserIDFunc: method is nil but Token.GetUserID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUserID.Lock()
	mock.calls.GetUserID = append(mock.calls.GetUserID, callInfo)
	mock.lockGetUserID.Unlock()
	return mock.GetUserIDFunc()
}

// GetUserIDCalls gets all the calls that were made to GetUserID.
// Check the length with:
//
//	len(mockedToken.GetUserIDCalls())
func (mock *TokenMock) GetUserIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserID.RLock()
	calls = mock.calls.GetUserID
	mock.lockGetUserID.RUnlock()
	return calls
}

// IsNotFound calls IsNotFoundFunc.
func (mock *TokenMock) IsNotFound() bool {
	if mock.IsNotFoundFunc == nil {
		panic("TokenMock.IsNotFoundFunc: method is nil but Token.IsNotFound was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsNotFound.Lock()
	mock.calls.IsNotFound = append(mock.calls.IsNotFound, callInfo)
	mock.lockIsNotFound.Unlock()
	return mock.IsNotFoundFunc()
}

// IsNotFoundCalls gets all the calls that were made to IsNotFound.
// Check the length with:
//
//	len(mockedToken.IsNotFoundCalls())
func (mock *TokenMock) IsNotFoundCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsNotFound.RLock()
	calls = mock.calls.IsNotFound
	mock.lockIsNotFound.RUnlock()
	return calls
}

// SetNewAccessToken calls SetNewAccessTokenFunc.
func (mock *TokenMock) SetNewAccessToken(privateKeyBase64 string) error {
	if mock.SetNewAccessTokenFunc == nil {
		panic("TokenMock.SetNewAccessTokenFunc: method is nil but Token.SetNewAccessToken was just called")
	}
	callInfo := struct {
		PrivateKeyBase64 string
	}{
		PrivateKeyBase64: privateKeyBase64,
	}
	mock.lockSetNewAccessToken.Lock()
	mock.calls.SetNewAccessToken = append(mock.calls.SetNewAccessToken, callInfo)
	mock.lockSetNewAccessToken.Unlock()
	return mock.SetNewAccessTokenFunc(privateKeyBase64)
}

// SetNewAccessTokenCalls gets all the calls that were made to SetNewAccessToken.
// Check the length with:
//
//	len(mockedToken.SetNewAccessTokenCalls())
func (mock *TokenMock) SetNewAccessTokenCalls() []struct {
	PrivateKeyBase64 string
} {
	var calls []struct {
		PrivateKeyBase64 string
	}
	mock.lockSetNewAccessToken.RLock()
	calls = mock.calls.SetNewAccessToken
	mock.lockSetNewAccessToken.RUnlock()
	return calls
}

// SetNewExpiry calls SetNewExpiryFunc.
func (mock *TokenMock) SetNewExpiry(additionalMin int) {
	if mock.SetNewExpiryFunc == nil {
		panic("TokenMock.SetNewExpiryFunc: method is nil but Token.SetNewExpiry was just called")
	}
	callInfo := struct {
		AdditionalMin int
	}{
		AdditionalMin: additionalMin,
	}
	mock.lockSetNewExpiry.Lock()
	mock.calls.SetNewExpiry = append(mock.calls.SetNewExpiry, callInfo)
	mock.lockSetNewExpiry.Unlock()
	mock.SetNewExpiryFunc(additionalMin)
}

// SetNewExpiryCalls gets all the calls that were made to SetNewExpiry.
// Check the length with:
//
//	len(mockedToken.SetNewExpiryCalls())
func (mock *TokenMock) SetNewExpiryCalls() []struct {
	AdditionalMin int
} {
	var calls []struct {
		AdditionalMin int
	}
	mock.lockSetNewExpiry.RLock()
	calls = mock.calls.SetNewExpiry
	mock.lockSetNewExpiry.RUnlock()
	return calls
}
