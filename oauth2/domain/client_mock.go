// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			IsNotFoundFunc: func() bool {
//				panic("mock out the IsNotFound method")
//			},
//			IsRedirectURIMatchFunc: func(redirectURI string) bool {
//				panic("mock out the IsRedirectURIMatch method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// IsNotFoundFunc mocks the IsNotFound method.
	IsNotFoundFunc func() bool

	// IsRedirectURIMatchFunc mocks the IsRedirectURIMatch method.
	IsRedirectURIMatchFunc func(redirectURI string) bool

	// calls tracks calls to the methods.
	calls struct {
		// IsNotFound holds details about calls to the IsNotFound method.
		IsNotFound []struct {
		}
		// IsRedirectURIMatch holds details about calls to the IsRedirectURIMatch method.
		IsRedirectURIMatch []struct {
			// RedirectURI is the redirectURI argument value.
			RedirectURI string
		}
	}
	lockIsNotFound         sync.RWMutex
	lockIsRedirectURIMatch sync.RWMutex
}

// IsNotFound calls IsNotFoundFunc.
func (mock *ClientMock) IsNotFound() bool {
	if mock.IsNotFoundFunc == nil {
		panic("ClientMock.IsNotFoundFunc: method is nil but Client.IsNotFound was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsNotFound.Lock()
	mock.calls.IsNotFound = append(mock.calls.IsNotFound, callInfo)
	mock.lockIsNotFound.Unlock()
	return mock.IsNotFoundFunc()
}

// IsNotFoundCalls gets all the calls that were made to IsNotFound.
// Check the length with:
//
//	len(mockedClient.IsNotFoundCalls())
func (mock *ClientMock) IsNotFoundCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsNotFound.RLock()
	calls = mock.calls.IsNotFound
	mock.lockIsNotFound.RUnlock()
	return calls
}

// IsRedirectURIMatch calls IsRedirectURIMatchFunc.
func (mock *ClientMock) IsRedirectURIMatch(redirectURI string) bool {
	if mock.IsRedirectURIMatchFunc == nil {
		panic("ClientMock.IsRedirectURIMatchFunc: method is nil but Client.IsRedirectURIMatch was just called")
	}
	callInfo := struct {
		RedirectURI string
	}{
		RedirectURI: redirectURI,
	}
	mock.lockIsRedirectURIMatch.Lock()
	mock.calls.IsRedirectURIMatch = append(mock.calls.IsRedirectURIMatch, callInfo)
	mock.lockIsRedirectURIMatch.Unlock()
	return mock.IsRedirectURIMatchFunc(redirectURI)
}

// IsRedirectURIMatchCalls gets all the calls that were made to IsRedirectURIMatch.
// Check the length with:
//
//	len(mockedClient.IsRedirectURIMatchCalls())
func (mock *ClientMock) IsRedirectURIMatchCalls() []struct {
	RedirectURI string
} {
	var calls []struct {
		RedirectURI string
	}
	mock.lockIsRedirectURIMatch.RLock()
	calls = mock.calls.IsRedirectURIMatch
	mock.lockIsRedirectURIMatch.RUnlock()
	return calls
}
