// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
	"time"
)

// Ensure, that RefreshTokenRepositoryMock does implement RefreshTokenRepository.
// If this is not the case, regenerate this file with moq.
var _ RefreshTokenRepository = &RefreshTokenRepositoryMock{}

// RefreshTokenRepositoryMock is a mock implementation of RefreshTokenRepository.
//
//	func TestSomethingThatUsesRefreshTokenRepository(t *testing.T) {
//
//		// make and configure a mocked RefreshTokenRepository
//		mockedRefreshTokenRepository := &RefreshTokenRepositoryMock{
//			FindValidRefreshTokenFunc: func(refreshToken string, expiresAt time.Time) (RefreshToken, error) {
//				panic("mock out the FindValidRefreshToken method")
//			},
//			RevokeRefreshTokenFunc: func(refreshToken string) error {
//				panic("mock out the RevokeRefreshToken method")
//			},
//			StoreRefreshTokenFunc: func(t RefreshToken) error {
//				panic("mock out the StoreRefreshToken method")
//			},
//		}
//
//		// use mockedRefreshTokenRepository in code that requires RefreshTokenRepository
//		// and then make assertions.
//
//	}
type RefreshTokenRepositoryMock struct {
	// FindValidRefreshTokenFunc mocks the FindValidRefreshToken method.
	FindValidRefreshTokenFunc func(refreshToken string, expiresAt time.Time) (RefreshToken, error)

	// RevokeRefreshTokenFunc mocks the RevokeRefreshToken method.
	RevokeRefreshTokenFunc func(refreshToken string) error

	// StoreRefreshTokenFunc mocks the StoreRefreshToken method.
	StoreRefreshTokenFunc func(t RefreshToken) error

	// calls tracks calls to the methods.
	calls struct {
		// FindValidRefreshToken holds details about calls to the FindValidRefreshToken method.
		FindValidRefreshToken []struct {
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
			// ExpiresAt is the expiresAt argument value.
			ExpiresAt time.Time
		}
		// RevokeRefreshToken holds details about calls to the RevokeRefreshToken method.
		RevokeRefreshToken []struct {
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
		}
		// StoreRefreshToken holds details about calls to the StoreRefreshToken method.
		StoreRefreshToken []struct {
			// T is the t argument value.
			T RefreshToken
		}
	}
	lockFindValidRefreshToken sync.RWMutex
	lockRevokeRefreshToken    sync.RWMutex
	lockStoreRefreshToken     sync.RWMutex
}

// FindValidRefreshToken calls FindValidRefreshTokenFunc.
func (mock *RefreshTokenRepositoryMock) FindValidRefreshToken(refreshToken string, expiresAt time.Time) (RefreshToken, error) {
	if mock.FindValidRefreshTokenFunc == nil {
		panic("RefreshTokenRepositoryMock.FindValidRefreshTokenFunc: method is nil but RefreshTokenRepository.FindValidRefreshToken was just called")
	}
	callInfo := struct {
		RefreshToken string
		ExpiresAt    time.Time
	}{
		RefreshToken: refreshToken,
		ExpiresAt:    expiresAt,
	}
	mock.lockFindValidRefreshToken.Lock()
	mock.calls.FindValidRefreshToken = append(mock.calls.FindValidRefreshToken, callInfo)
	mock.lockFindValidRefreshToken.Unlock()
	return mock.FindValidRefreshTokenFunc(refreshToken, expiresAt)
}

// FindValidRefreshTokenCalls gets all the calls that were made to FindValidRefreshToken.
// Check the length with:
//
//	len(mockedRefreshTokenRepository.FindValidRefreshTokenCalls())
func (mock *RefreshTokenRepositoryMock) FindValidRefreshTokenCalls() []struct {
	RefreshToken string
	ExpiresAt    time.Time
} {
	var calls []struct {
		RefreshToken string
		ExpiresAt    time.Time
	}
	mock.lockFindValidRefreshToken.RLock()
	calls = mock.calls.FindValidRefreshToken
	mock.lockFindValidRefreshToken.RUnlock()
	return calls
}

// RevokeRefreshToken calls RevokeRefreshTokenFunc.
func (mock *RefreshTokenRepositoryMock) RevokeRefreshToken(refreshToken string) error {
	if mock.RevokeRefreshTokenFunc == nil {
		panic("RefreshTokenRepositoryMock.RevokeRefreshTokenFunc: method is nil but RefreshTokenRepository.RevokeRefreshToken was just called")
	}
	callInfo := struct {
		RefreshToken string
	}{
		RefreshToken: refreshToken,
	}
	mock.lockRevokeRefreshToken.Lock()
	mock.calls.RevokeRefreshToken = append(mock.calls.RevokeRefreshToken, callInfo)
	mock.lockRevokeRefreshToken.Unlock()
	return mock.RevokeRefreshTokenFunc(refreshToken)
}

// RevokeRefreshTokenCalls gets all the calls that were made to RevokeRefreshToken.
// Check the length with:
//
//	len(mockedRefreshTokenRepository.RevokeRefreshTokenCalls())
func (mock *RefreshTokenRepositoryMock) RevokeRefreshTokenCalls() []struct {
	RefreshToken string
} {
	var calls []struct {
		RefreshToken string
	}
	mock.lockRevokeRefreshToken.RLock()
	calls = mock.calls.RevokeRefreshToken
	mock.lockRevokeRefreshToken.RUnlock()
	return calls
}

// StoreRefreshToken calls StoreRefreshTokenFunc.
func (mock *RefreshTokenRepositoryMock) StoreRefreshToken(t RefreshToken) error {
	if mock.StoreRefreshTokenFunc == nil {
		panic("RefreshTokenRepositoryMock.StoreRefreshTokenFunc: method is nil but RefreshTokenRepository.StoreRefreshToken was just called")
	}
	callInfo := struct {
		T RefreshToken
	}{
		T: t,
	}
	mock.lockStoreRefreshToken.Lock()
	mock.calls.StoreRefreshToken = append(mock.calls.StoreRefreshToken, callInfo)
	mock.lockStoreRefreshToken.Unlock()
	return mock.StoreRefreshTokenFunc(t)
}

// StoreRefreshTokenCalls gets all the calls that were made to StoreRefreshToken.
// Check the length with:
//
//	len(mockedRefreshTokenRepository.StoreRefreshTokenCalls())
func (mock *RefreshTokenRepositoryMock) StoreRefreshTokenCalls() []struct {
	T RefreshToken
} {
	var calls []struct {
		T RefreshToken
	}
	mock.lockStoreRefreshToken.RLock()
	calls = mock.calls.StoreRefreshToken
	mock.lockStoreRefreshToken.RUnlock()
	return calls
}
