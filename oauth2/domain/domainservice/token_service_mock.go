// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domainservice

import (
	"github.com/google/uuid"
	"github.com/sntkn/go-oauth2/oauth2/domain"
	"sync"
	"time"
)

// Ensure, that TokenServiceMock does implement TokenService.
// If this is not the case, regenerate this file with moq.
var _ TokenService = &TokenServiceMock{}

// TokenServiceMock is a mock implementation of TokenService.
//
//	func TestSomethingThatUsesTokenService(t *testing.T) {
//
//		// make and configure a mocked TokenService
//		mockedTokenService := &TokenServiceMock{
//			FindTokenFunc: func(accessToken string) (domain.Token, error) {
//				panic("mock out the FindToken method")
//			},
//			FindValidRefreshTokenFunc: func(refreshToken string, expiresAt time.Time) (domain.RefreshToken, error) {
//				panic("mock out the FindValidRefreshToken method")
//			},
//			RevokeRefreshTokenFunc: func(refreshToken string) error {
//				panic("mock out the RevokeRefreshToken method")
//			},
//			RevokeTokenFunc: func(accessToken string) error {
//				panic("mock out the RevokeToken method")
//			},
//			StoreNewRefreshTokenFunc: func(accessToken string) (domain.RefreshToken, error) {
//				panic("mock out the StoreNewRefreshToken method")
//			},
//			StoreNewTokenFunc: func(clientID uuid.UUID, UserID uuid.UUID, scope string) (domain.Token, error) {
//				panic("mock out the StoreNewToken method")
//			},
//		}
//
//		// use mockedTokenService in code that requires TokenService
//		// and then make assertions.
//
//	}
type TokenServiceMock struct {
	// FindTokenFunc mocks the FindToken method.
	FindTokenFunc func(accessToken string) (domain.Token, error)

	// FindValidRefreshTokenFunc mocks the FindValidRefreshToken method.
	FindValidRefreshTokenFunc func(refreshToken string, expiresAt time.Time) (domain.RefreshToken, error)

	// RevokeRefreshTokenFunc mocks the RevokeRefreshToken method.
	RevokeRefreshTokenFunc func(refreshToken string) error

	// RevokeTokenFunc mocks the RevokeToken method.
	RevokeTokenFunc func(accessToken string) error

	// StoreNewRefreshTokenFunc mocks the StoreNewRefreshToken method.
	StoreNewRefreshTokenFunc func(accessToken string) (domain.RefreshToken, error)

	// StoreNewTokenFunc mocks the StoreNewToken method.
	StoreNewTokenFunc func(clientID uuid.UUID, UserID uuid.UUID, scope string) (domain.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindToken holds details about calls to the FindToken method.
		FindToken []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// FindValidRefreshToken holds details about calls to the FindValidRefreshToken method.
		FindValidRefreshToken []struct {
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
			// ExpiresAt is the expiresAt argument value.
			ExpiresAt time.Time
		}
		// RevokeRefreshToken holds details about calls to the RevokeRefreshToken method.
		RevokeRefreshToken []struct {
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
		}
		// RevokeToken holds details about calls to the RevokeToken method.
		RevokeToken []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// StoreNewRefreshToken holds details about calls to the StoreNewRefreshToken method.
		StoreNewRefreshToken []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// StoreNewToken holds details about calls to the StoreNewToken method.
		StoreNewToken []struct {
			// ClientID is the clientID argument value.
			ClientID uuid.UUID
			// UserID is the UserID argument value.
			UserID uuid.UUID
			// Scope is the scope argument value.
			Scope string
		}
	}
	lockFindToken             sync.RWMutex
	lockFindValidRefreshToken sync.RWMutex
	lockRevokeRefreshToken    sync.RWMutex
	lockRevokeToken           sync.RWMutex
	lockStoreNewRefreshToken  sync.RWMutex
	lockStoreNewToken         sync.RWMutex
}

// FindToken calls FindTokenFunc.
func (mock *TokenServiceMock) FindToken(accessToken string) (domain.Token, error) {
	if mock.FindTokenFunc == nil {
		panic("TokenServiceMock.FindTokenFunc: method is nil but TokenService.FindToken was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockFindToken.Lock()
	mock.calls.FindToken = append(mock.calls.FindToken, callInfo)
	mock.lockFindToken.Unlock()
	return mock.FindTokenFunc(accessToken)
}

// FindTokenCalls gets all the calls that were made to FindToken.
// Check the length with:
//
//	len(mockedTokenService.FindTokenCalls())
func (mock *TokenServiceMock) FindTokenCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockFindToken.RLock()
	calls = mock.calls.FindToken
	mock.lockFindToken.RUnlock()
	return calls
}

// FindValidRefreshToken calls FindValidRefreshTokenFunc.
func (mock *TokenServiceMock) FindValidRefreshToken(refreshToken string, expiresAt time.Time) (domain.RefreshToken, error) {
	if mock.FindValidRefreshTokenFunc == nil {
		panic("TokenServiceMock.FindValidRefreshTokenFunc: method is nil but TokenService.FindValidRefreshToken was just called")
	}
	callInfo := struct {
		RefreshToken string
		ExpiresAt    time.Time
	}{
		RefreshToken: refreshToken,
		ExpiresAt:    expiresAt,
	}
	mock.lockFindValidRefreshToken.Lock()
	mock.calls.FindValidRefreshToken = append(mock.calls.FindValidRefreshToken, callInfo)
	mock.lockFindValidRefreshToken.Unlock()
	return mock.FindValidRefreshTokenFunc(refreshToken, expiresAt)
}

// FindValidRefreshTokenCalls gets all the calls that were made to FindValidRefreshToken.
// Check the length with:
//
//	len(mockedTokenService.FindValidRefreshTokenCalls())
func (mock *TokenServiceMock) FindValidRefreshTokenCalls() []struct {
	RefreshToken string
	ExpiresAt    time.Time
} {
	var calls []struct {
		RefreshToken string
		ExpiresAt    time.Time
	}
	mock.lockFindValidRefreshToken.RLock()
	calls = mock.calls.FindValidRefreshToken
	mock.lockFindValidRefreshToken.RUnlock()
	return calls
}

// RevokeRefreshToken calls RevokeRefreshTokenFunc.
func (mock *TokenServiceMock) RevokeRefreshToken(refreshToken string) error {
	if mock.RevokeRefreshTokenFunc == nil {
		panic("TokenServiceMock.RevokeRefreshTokenFunc: method is nil but TokenService.RevokeRefreshToken was just called")
	}
	callInfo := struct {
		RefreshToken string
	}{
		RefreshToken: refreshToken,
	}
	mock.lockRevokeRefreshToken.Lock()
	mock.calls.RevokeRefreshToken = append(mock.calls.RevokeRefreshToken, callInfo)
	mock.lockRevokeRefreshToken.Unlock()
	return mock.RevokeRefreshTokenFunc(refreshToken)
}

// RevokeRefreshTokenCalls gets all the calls that were made to RevokeRefreshToken.
// Check the length with:
//
//	len(mockedTokenService.RevokeRefreshTokenCalls())
func (mock *TokenServiceMock) RevokeRefreshTokenCalls() []struct {
	RefreshToken string
} {
	var calls []struct {
		RefreshToken string
	}
	mock.lockRevokeRefreshToken.RLock()
	calls = mock.calls.RevokeRefreshToken
	mock.lockRevokeRefreshToken.RUnlock()
	return calls
}

// RevokeToken calls RevokeTokenFunc.
func (mock *TokenServiceMock) RevokeToken(accessToken string) error {
	if mock.RevokeTokenFunc == nil {
		panic("TokenServiceMock.RevokeTokenFunc: method is nil but TokenService.RevokeToken was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockRevokeToken.Lock()
	mock.calls.RevokeToken = append(mock.calls.RevokeToken, callInfo)
	mock.lockRevokeToken.Unlock()
	return mock.RevokeTokenFunc(accessToken)
}

// RevokeTokenCalls gets all the calls that were made to RevokeToken.
// Check the length with:
//
//	len(mockedTokenService.RevokeTokenCalls())
func (mock *TokenServiceMock) RevokeTokenCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockRevokeToken.RLock()
	calls = mock.calls.RevokeToken
	mock.lockRevokeToken.RUnlock()
	return calls
}

// StoreNewRefreshToken calls StoreNewRefreshTokenFunc.
func (mock *TokenServiceMock) StoreNewRefreshToken(accessToken string) (domain.RefreshToken, error) {
	if mock.StoreNewRefreshTokenFunc == nil {
		panic("TokenServiceMock.StoreNewRefreshTokenFunc: method is nil but TokenService.StoreNewRefreshToken was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockStoreNewRefreshToken.Lock()
	mock.calls.StoreNewRefreshToken = append(mock.calls.StoreNewRefreshToken, callInfo)
	mock.lockStoreNewRefreshToken.Unlock()
	return mock.StoreNewRefreshTokenFunc(accessToken)
}

// StoreNewRefreshTokenCalls gets all the calls that were made to StoreNewRefreshToken.
// Check the length with:
//
//	len(mockedTokenService.StoreNewRefreshTokenCalls())
func (mock *TokenServiceMock) StoreNewRefreshTokenCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockStoreNewRefreshToken.RLock()
	calls = mock.calls.StoreNewRefreshToken
	mock.lockStoreNewRefreshToken.RUnlock()
	return calls
}

// StoreNewToken calls StoreNewTokenFunc.
func (mock *TokenServiceMock) StoreNewToken(clientID uuid.UUID, UserID uuid.UUID, scope string) (domain.Token, error) {
	if mock.StoreNewTokenFunc == nil {
		panic("TokenServiceMock.StoreNewTokenFunc: method is nil but TokenService.StoreNewToken was just called")
	}
	callInfo := struct {
		ClientID uuid.UUID
		UserID   uuid.UUID
		Scope    string
	}{
		ClientID: clientID,
		UserID:   UserID,
		Scope:    scope,
	}
	mock.lockStoreNewToken.Lock()
	mock.calls.StoreNewToken = append(mock.calls.StoreNewToken, callInfo)
	mock.lockStoreNewToken.Unlock()
	return mock.StoreNewTokenFunc(clientID, UserID, scope)
}

// StoreNewTokenCalls gets all the calls that were made to StoreNewToken.
// Check the length with:
//
//	len(mockedTokenService.StoreNewTokenCalls())
func (mock *TokenServiceMock) StoreNewTokenCalls() []struct {
	ClientID uuid.UUID
	UserID   uuid.UUID
	Scope    string
} {
	var calls []struct {
		ClientID uuid.UUID
		UserID   uuid.UUID
		Scope    string
	}
	mock.lockStoreNewToken.RLock()
	calls = mock.calls.StoreNewToken
	mock.lockStoreNewToken.RUnlock()
	return calls
}
