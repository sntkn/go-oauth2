// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			FindUserByEmailFunc: func(email string) (User, error) {
//				panic("mock out the FindUserByEmail method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// FindUserByEmailFunc mocks the FindUserByEmail method.
	FindUserByEmailFunc func(email string) (User, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindUserByEmail holds details about calls to the FindUserByEmail method.
		FindUserByEmail []struct {
			// Email is the email argument value.
			Email string
		}
	}
	lockFindUserByEmail sync.RWMutex
}

// FindUserByEmail calls FindUserByEmailFunc.
func (mock *UserRepositoryMock) FindUserByEmail(email string) (User, error) {
	if mock.FindUserByEmailFunc == nil {
		panic("UserRepositoryMock.FindUserByEmailFunc: method is nil but UserRepository.FindUserByEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	mock.lockFindUserByEmail.Lock()
	mock.calls.FindUserByEmail = append(mock.calls.FindUserByEmail, callInfo)
	mock.lockFindUserByEmail.Unlock()
	return mock.FindUserByEmailFunc(email)
}

// FindUserByEmailCalls gets all the calls that were made to FindUserByEmail.
// Check the length with:
//
//	len(mockedUserRepository.FindUserByEmailCalls())
func (mock *UserRepositoryMock) FindUserByEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	mock.lockFindUserByEmail.RLock()
	calls = mock.calls.FindUserByEmail
	mock.lockFindUserByEmail.RUnlock()
	return calls
}
