// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"github.com/sntkn/go-oauth2/oauth2/internal/usecases"
	"sync"
)

// Ensure, that AuthorizationUsecaseMock does implement AuthorizationUsecase.
// If this is not the case, regenerate this file with moq.
var _ AuthorizationUsecase = &AuthorizationUsecaseMock{}

// AuthorizationUsecaseMock is a mock implementation of AuthorizationUsecase.
//
//	func TestSomethingThatUsesAuthorizationUsecase(t *testing.T) {
//
//		// make and configure a mocked AuthorizationUsecase
//		mockedAuthorizationUsecase := &AuthorizationUsecaseMock{
//			InvokeFunc: func(input usecases.AuthorizationInput) (string, error) {
//				panic("mock out the Invoke method")
//			},
//		}
//
//		// use mockedAuthorizationUsecase in code that requires AuthorizationUsecase
//		// and then make assertions.
//
//	}
type AuthorizationUsecaseMock struct {
	// InvokeFunc mocks the Invoke method.
	InvokeFunc func(input usecases.AuthorizationInput) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Invoke holds details about calls to the Invoke method.
		Invoke []struct {
			// Input is the input argument value.
			Input usecases.AuthorizationInput
		}
	}
	lockInvoke sync.RWMutex
}

// Invoke calls InvokeFunc.
func (mock *AuthorizationUsecaseMock) Invoke(input usecases.AuthorizationInput) (string, error) {
	if mock.InvokeFunc == nil {
		panic("AuthorizationUsecaseMock.InvokeFunc: method is nil but AuthorizationUsecase.Invoke was just called")
	}
	callInfo := struct {
		Input usecases.AuthorizationInput
	}{
		Input: input,
	}
	mock.lockInvoke.Lock()
	mock.calls.Invoke = append(mock.calls.Invoke, callInfo)
	mock.lockInvoke.Unlock()
	return mock.InvokeFunc(input)
}

// InvokeCalls gets all the calls that were made to Invoke.
// Check the length with:
//
//	len(mockedAuthorizationUsecase.InvokeCalls())
func (mock *AuthorizationUsecaseMock) InvokeCalls() []struct {
	Input usecases.AuthorizationInput
} {
	var calls []struct {
		Input usecases.AuthorizationInput
	}
	mock.lockInvoke.RLock()
	calls = mock.calls.Invoke
	mock.lockInvoke.RUnlock()
	return calls
}
