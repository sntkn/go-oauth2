name: LintAndTest

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.target }}/go.mod
          check-latest: true
          cache-dependency-path: |
              ${{ inputs.target }}/go.sum
      # 1. Buildxのセットアップ
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 2. GHCRログイン
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. メタデータセットアップ
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 4. Buildxのセットアップ
      - name: Build and push Docker database image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/database
          push: true
          tags: ${{ steps.meta.outputs.tags }}-db
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}-db
          cache-to: type=inline
          no-cache: false

      # 5. Buildxのセットアップ
      - name: Build and push Docker session image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/session
          push: true
          tags: ${{ steps.meta.outputs.tags }}-session
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}-session
          cache-to: type=inline
          no-cache: false

      # 6. docker composeビルド/起動
      - name: Compose Build & UP
        run: |
          docker buildx build --cache-from type=registry,ref=${{ steps.meta.outputs.tags }}-db ./docker/database --load
          docker buildx build --cache-from type=registry,ref=${{ steps.meta.outputs.tags }}-session ./docker/session --load
          docker buildx bake -f compose.yml database session
          docker compose up -d database session

      - name: Wait for Services
        run: ./docker/wait-for-services.sh

      - name: Wait for table creation
        run: |
          until docker compose exec database psql -U admin -d auth -c "SELECT to_regclass('public.users');" | grep -q "users"; do
            echo "Waiting for table creation"
            sleep 1
          done
          echo "Table 'users' exists"

      # 7. テスト実行
      - name: Test
        run: |
          cd ${{ inputs.target }}
          go test -v ./...
