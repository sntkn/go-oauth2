// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sntkn/go-oauth2/api/internal/infrastructure/db/model"
)

func newOauth2Client(db *gorm.DB, opts ...gen.DOOption) oauth2Client {
	_oauth2Client := oauth2Client{}

	_oauth2Client.oauth2ClientDo.UseDB(db, opts...)
	_oauth2Client.oauth2ClientDo.UseModel(&model.Oauth2Client{})

	tableName := _oauth2Client.oauth2ClientDo.TableName()
	_oauth2Client.ALL = field.NewAsterisk(tableName)
	_oauth2Client.ID = field.NewString(tableName, "id")
	_oauth2Client.Name = field.NewString(tableName, "name")
	_oauth2Client.RedirectUris = field.NewString(tableName, "redirect_uris")
	_oauth2Client.CreatedAt = field.NewTime(tableName, "created_at")
	_oauth2Client.UpdatedAt = field.NewTime(tableName, "updated_at")

	_oauth2Client.fillFieldMap()

	return _oauth2Client
}

type oauth2Client struct {
	oauth2ClientDo

	ALL          field.Asterisk
	ID           field.String
	Name         field.String
	RedirectUris field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (o oauth2Client) Table(newTableName string) *oauth2Client {
	o.oauth2ClientDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oauth2Client) As(alias string) *oauth2Client {
	o.oauth2ClientDo.DO = *(o.oauth2ClientDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oauth2Client) updateTableName(table string) *oauth2Client {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.Name = field.NewString(table, "name")
	o.RedirectUris = field.NewString(table, "redirect_uris")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *oauth2Client) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oauth2Client) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["redirect_uris"] = o.RedirectUris
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o oauth2Client) clone(db *gorm.DB) oauth2Client {
	o.oauth2ClientDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oauth2Client) replaceDB(db *gorm.DB) oauth2Client {
	o.oauth2ClientDo.ReplaceDB(db)
	return o
}

type oauth2ClientDo struct{ gen.DO }

type IOauth2ClientDo interface {
	gen.SubQuery
	Debug() IOauth2ClientDo
	WithContext(ctx context.Context) IOauth2ClientDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOauth2ClientDo
	WriteDB() IOauth2ClientDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOauth2ClientDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOauth2ClientDo
	Not(conds ...gen.Condition) IOauth2ClientDo
	Or(conds ...gen.Condition) IOauth2ClientDo
	Select(conds ...field.Expr) IOauth2ClientDo
	Where(conds ...gen.Condition) IOauth2ClientDo
	Order(conds ...field.Expr) IOauth2ClientDo
	Distinct(cols ...field.Expr) IOauth2ClientDo
	Omit(cols ...field.Expr) IOauth2ClientDo
	Join(table schema.Tabler, on ...field.Expr) IOauth2ClientDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2ClientDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOauth2ClientDo
	Group(cols ...field.Expr) IOauth2ClientDo
	Having(conds ...gen.Condition) IOauth2ClientDo
	Limit(limit int) IOauth2ClientDo
	Offset(offset int) IOauth2ClientDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2ClientDo
	Unscoped() IOauth2ClientDo
	Create(values ...*model.Oauth2Client) error
	CreateInBatches(values []*model.Oauth2Client, batchSize int) error
	Save(values ...*model.Oauth2Client) error
	First() (*model.Oauth2Client, error)
	Take() (*model.Oauth2Client, error)
	Last() (*model.Oauth2Client, error)
	Find() ([]*model.Oauth2Client, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2Client, err error)
	FindInBatches(result *[]*model.Oauth2Client, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Oauth2Client) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOauth2ClientDo
	Assign(attrs ...field.AssignExpr) IOauth2ClientDo
	Joins(fields ...field.RelationField) IOauth2ClientDo
	Preload(fields ...field.RelationField) IOauth2ClientDo
	FirstOrInit() (*model.Oauth2Client, error)
	FirstOrCreate() (*model.Oauth2Client, error)
	FindByPage(offset int, limit int) (result []*model.Oauth2Client, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOauth2ClientDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oauth2ClientDo) Debug() IOauth2ClientDo {
	return o.withDO(o.DO.Debug())
}

func (o oauth2ClientDo) WithContext(ctx context.Context) IOauth2ClientDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oauth2ClientDo) ReadDB() IOauth2ClientDo {
	return o.Clauses(dbresolver.Read)
}

func (o oauth2ClientDo) WriteDB() IOauth2ClientDo {
	return o.Clauses(dbresolver.Write)
}

func (o oauth2ClientDo) Session(config *gorm.Session) IOauth2ClientDo {
	return o.withDO(o.DO.Session(config))
}

func (o oauth2ClientDo) Clauses(conds ...clause.Expression) IOauth2ClientDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oauth2ClientDo) Returning(value interface{}, columns ...string) IOauth2ClientDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oauth2ClientDo) Not(conds ...gen.Condition) IOauth2ClientDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oauth2ClientDo) Or(conds ...gen.Condition) IOauth2ClientDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oauth2ClientDo) Select(conds ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oauth2ClientDo) Where(conds ...gen.Condition) IOauth2ClientDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oauth2ClientDo) Order(conds ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oauth2ClientDo) Distinct(cols ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oauth2ClientDo) Omit(cols ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oauth2ClientDo) Join(table schema.Tabler, on ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oauth2ClientDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oauth2ClientDo) RightJoin(table schema.Tabler, on ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oauth2ClientDo) Group(cols ...field.Expr) IOauth2ClientDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oauth2ClientDo) Having(conds ...gen.Condition) IOauth2ClientDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oauth2ClientDo) Limit(limit int) IOauth2ClientDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oauth2ClientDo) Offset(offset int) IOauth2ClientDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oauth2ClientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2ClientDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oauth2ClientDo) Unscoped() IOauth2ClientDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oauth2ClientDo) Create(values ...*model.Oauth2Client) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oauth2ClientDo) CreateInBatches(values []*model.Oauth2Client, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oauth2ClientDo) Save(values ...*model.Oauth2Client) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oauth2ClientDo) First() (*model.Oauth2Client, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Client), nil
	}
}

func (o oauth2ClientDo) Take() (*model.Oauth2Client, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Client), nil
	}
}

func (o oauth2ClientDo) Last() (*model.Oauth2Client, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Client), nil
	}
}

func (o oauth2ClientDo) Find() ([]*model.Oauth2Client, error) {
	result, err := o.DO.Find()
	return result.([]*model.Oauth2Client), err
}

func (o oauth2ClientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2Client, err error) {
	buf := make([]*model.Oauth2Client, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oauth2ClientDo) FindInBatches(result *[]*model.Oauth2Client, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oauth2ClientDo) Attrs(attrs ...field.AssignExpr) IOauth2ClientDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oauth2ClientDo) Assign(attrs ...field.AssignExpr) IOauth2ClientDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oauth2ClientDo) Joins(fields ...field.RelationField) IOauth2ClientDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oauth2ClientDo) Preload(fields ...field.RelationField) IOauth2ClientDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oauth2ClientDo) FirstOrInit() (*model.Oauth2Client, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Client), nil
	}
}

func (o oauth2ClientDo) FirstOrCreate() (*model.Oauth2Client, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Client), nil
	}
}

func (o oauth2ClientDo) FindByPage(offset int, limit int) (result []*model.Oauth2Client, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oauth2ClientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oauth2ClientDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oauth2ClientDo) Delete(models ...*model.Oauth2Client) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oauth2ClientDo) withDO(do gen.Dao) *oauth2ClientDo {
	o.DO = *do.(*gen.DO)
	return o
}
