// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sntkn/go-oauth2/api/internal/interfaces/db/model"
)

func newOauth2RefreshToken(db *gorm.DB, opts ...gen.DOOption) oauth2RefreshToken {
	_oauth2RefreshToken := oauth2RefreshToken{}

	_oauth2RefreshToken.oauth2RefreshTokenDo.UseDB(db, opts...)
	_oauth2RefreshToken.oauth2RefreshTokenDo.UseModel(&model.Oauth2RefreshToken{})

	tableName := _oauth2RefreshToken.oauth2RefreshTokenDo.TableName()
	_oauth2RefreshToken.ALL = field.NewAsterisk(tableName)
	_oauth2RefreshToken.RefreshToken = field.NewString(tableName, "refresh_token")
	_oauth2RefreshToken.AccessToken = field.NewString(tableName, "access_token")
	_oauth2RefreshToken.ExpiresAt = field.NewTime(tableName, "expires_at")
	_oauth2RefreshToken.CreatedAt = field.NewTime(tableName, "created_at")
	_oauth2RefreshToken.UpdatedAt = field.NewTime(tableName, "updated_at")

	_oauth2RefreshToken.fillFieldMap()

	return _oauth2RefreshToken
}

type oauth2RefreshToken struct {
	oauth2RefreshTokenDo

	ALL          field.Asterisk
	RefreshToken field.String
	AccessToken  field.String
	ExpiresAt    field.Time
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (o oauth2RefreshToken) Table(newTableName string) *oauth2RefreshToken {
	o.oauth2RefreshTokenDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oauth2RefreshToken) As(alias string) *oauth2RefreshToken {
	o.oauth2RefreshTokenDo.DO = *(o.oauth2RefreshTokenDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oauth2RefreshToken) updateTableName(table string) *oauth2RefreshToken {
	o.ALL = field.NewAsterisk(table)
	o.RefreshToken = field.NewString(table, "refresh_token")
	o.AccessToken = field.NewString(table, "access_token")
	o.ExpiresAt = field.NewTime(table, "expires_at")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *oauth2RefreshToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oauth2RefreshToken) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["refresh_token"] = o.RefreshToken
	o.fieldMap["access_token"] = o.AccessToken
	o.fieldMap["expires_at"] = o.ExpiresAt
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o oauth2RefreshToken) clone(db *gorm.DB) oauth2RefreshToken {
	o.oauth2RefreshTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oauth2RefreshToken) replaceDB(db *gorm.DB) oauth2RefreshToken {
	o.oauth2RefreshTokenDo.ReplaceDB(db)
	return o
}

type oauth2RefreshTokenDo struct{ gen.DO }

type IOauth2RefreshTokenDo interface {
	gen.SubQuery
	Debug() IOauth2RefreshTokenDo
	WithContext(ctx context.Context) IOauth2RefreshTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOauth2RefreshTokenDo
	WriteDB() IOauth2RefreshTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOauth2RefreshTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOauth2RefreshTokenDo
	Not(conds ...gen.Condition) IOauth2RefreshTokenDo
	Or(conds ...gen.Condition) IOauth2RefreshTokenDo
	Select(conds ...field.Expr) IOauth2RefreshTokenDo
	Where(conds ...gen.Condition) IOauth2RefreshTokenDo
	Order(conds ...field.Expr) IOauth2RefreshTokenDo
	Distinct(cols ...field.Expr) IOauth2RefreshTokenDo
	Omit(cols ...field.Expr) IOauth2RefreshTokenDo
	Join(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo
	Group(cols ...field.Expr) IOauth2RefreshTokenDo
	Having(conds ...gen.Condition) IOauth2RefreshTokenDo
	Limit(limit int) IOauth2RefreshTokenDo
	Offset(offset int) IOauth2RefreshTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2RefreshTokenDo
	Unscoped() IOauth2RefreshTokenDo
	Create(values ...*model.Oauth2RefreshToken) error
	CreateInBatches(values []*model.Oauth2RefreshToken, batchSize int) error
	Save(values ...*model.Oauth2RefreshToken) error
	First() (*model.Oauth2RefreshToken, error)
	Take() (*model.Oauth2RefreshToken, error)
	Last() (*model.Oauth2RefreshToken, error)
	Find() ([]*model.Oauth2RefreshToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2RefreshToken, err error)
	FindInBatches(result *[]*model.Oauth2RefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Oauth2RefreshToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOauth2RefreshTokenDo
	Assign(attrs ...field.AssignExpr) IOauth2RefreshTokenDo
	Joins(fields ...field.RelationField) IOauth2RefreshTokenDo
	Preload(fields ...field.RelationField) IOauth2RefreshTokenDo
	FirstOrInit() (*model.Oauth2RefreshToken, error)
	FirstOrCreate() (*model.Oauth2RefreshToken, error)
	FindByPage(offset int, limit int) (result []*model.Oauth2RefreshToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOauth2RefreshTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oauth2RefreshTokenDo) Debug() IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Debug())
}

func (o oauth2RefreshTokenDo) WithContext(ctx context.Context) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oauth2RefreshTokenDo) ReadDB() IOauth2RefreshTokenDo {
	return o.Clauses(dbresolver.Read)
}

func (o oauth2RefreshTokenDo) WriteDB() IOauth2RefreshTokenDo {
	return o.Clauses(dbresolver.Write)
}

func (o oauth2RefreshTokenDo) Session(config *gorm.Session) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Session(config))
}

func (o oauth2RefreshTokenDo) Clauses(conds ...clause.Expression) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oauth2RefreshTokenDo) Returning(value interface{}, columns ...string) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oauth2RefreshTokenDo) Not(conds ...gen.Condition) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oauth2RefreshTokenDo) Or(conds ...gen.Condition) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oauth2RefreshTokenDo) Select(conds ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oauth2RefreshTokenDo) Where(conds ...gen.Condition) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oauth2RefreshTokenDo) Order(conds ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oauth2RefreshTokenDo) Distinct(cols ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oauth2RefreshTokenDo) Omit(cols ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oauth2RefreshTokenDo) Join(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oauth2RefreshTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oauth2RefreshTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oauth2RefreshTokenDo) Group(cols ...field.Expr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oauth2RefreshTokenDo) Having(conds ...gen.Condition) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oauth2RefreshTokenDo) Limit(limit int) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oauth2RefreshTokenDo) Offset(offset int) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oauth2RefreshTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oauth2RefreshTokenDo) Unscoped() IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oauth2RefreshTokenDo) Create(values ...*model.Oauth2RefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oauth2RefreshTokenDo) CreateInBatches(values []*model.Oauth2RefreshToken, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oauth2RefreshTokenDo) Save(values ...*model.Oauth2RefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oauth2RefreshTokenDo) First() (*model.Oauth2RefreshToken, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2RefreshToken), nil
	}
}

func (o oauth2RefreshTokenDo) Take() (*model.Oauth2RefreshToken, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2RefreshToken), nil
	}
}

func (o oauth2RefreshTokenDo) Last() (*model.Oauth2RefreshToken, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2RefreshToken), nil
	}
}

func (o oauth2RefreshTokenDo) Find() ([]*model.Oauth2RefreshToken, error) {
	result, err := o.DO.Find()
	return result.([]*model.Oauth2RefreshToken), err
}

func (o oauth2RefreshTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2RefreshToken, err error) {
	buf := make([]*model.Oauth2RefreshToken, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oauth2RefreshTokenDo) FindInBatches(result *[]*model.Oauth2RefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oauth2RefreshTokenDo) Attrs(attrs ...field.AssignExpr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oauth2RefreshTokenDo) Assign(attrs ...field.AssignExpr) IOauth2RefreshTokenDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oauth2RefreshTokenDo) Joins(fields ...field.RelationField) IOauth2RefreshTokenDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oauth2RefreshTokenDo) Preload(fields ...field.RelationField) IOauth2RefreshTokenDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oauth2RefreshTokenDo) FirstOrInit() (*model.Oauth2RefreshToken, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2RefreshToken), nil
	}
}

func (o oauth2RefreshTokenDo) FirstOrCreate() (*model.Oauth2RefreshToken, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2RefreshToken), nil
	}
}

func (o oauth2RefreshTokenDo) FindByPage(offset int, limit int) (result []*model.Oauth2RefreshToken, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oauth2RefreshTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oauth2RefreshTokenDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oauth2RefreshTokenDo) Delete(models ...*model.Oauth2RefreshToken) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oauth2RefreshTokenDo) withDO(do gen.Dao) *oauth2RefreshTokenDo {
	o.DO = *do.(*gen.DO)
	return o
}
