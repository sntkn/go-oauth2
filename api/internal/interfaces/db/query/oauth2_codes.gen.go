// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sntkn/go-oauth2/api/internal/interfaces/db/model"
)

func newOauth2Code(db *gorm.DB, opts ...gen.DOOption) oauth2Code {
	_oauth2Code := oauth2Code{}

	_oauth2Code.oauth2CodeDo.UseDB(db, opts...)
	_oauth2Code.oauth2CodeDo.UseModel(&model.Oauth2Code{})

	tableName := _oauth2Code.oauth2CodeDo.TableName()
	_oauth2Code.ALL = field.NewAsterisk(tableName)
	_oauth2Code.Code = field.NewString(tableName, "code")
	_oauth2Code.ClientID = field.NewString(tableName, "client_id")
	_oauth2Code.UserID = field.NewString(tableName, "user_id")
	_oauth2Code.Scope = field.NewString(tableName, "scope")
	_oauth2Code.RedirectURI = field.NewString(tableName, "redirect_uri")
	_oauth2Code.ExpiresAt = field.NewTime(tableName, "expires_at")
	_oauth2Code.RevokedAt = field.NewTime(tableName, "revoked_at")
	_oauth2Code.CreatedAt = field.NewTime(tableName, "created_at")
	_oauth2Code.UpdatedAt = field.NewTime(tableName, "updated_at")

	_oauth2Code.fillFieldMap()

	return _oauth2Code
}

type oauth2Code struct {
	oauth2CodeDo

	ALL         field.Asterisk
	Code        field.String
	ClientID    field.String
	UserID      field.String
	Scope       field.String
	RedirectURI field.String
	ExpiresAt   field.Time
	RevokedAt   field.Time
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (o oauth2Code) Table(newTableName string) *oauth2Code {
	o.oauth2CodeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oauth2Code) As(alias string) *oauth2Code {
	o.oauth2CodeDo.DO = *(o.oauth2CodeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oauth2Code) updateTableName(table string) *oauth2Code {
	o.ALL = field.NewAsterisk(table)
	o.Code = field.NewString(table, "code")
	o.ClientID = field.NewString(table, "client_id")
	o.UserID = field.NewString(table, "user_id")
	o.Scope = field.NewString(table, "scope")
	o.RedirectURI = field.NewString(table, "redirect_uri")
	o.ExpiresAt = field.NewTime(table, "expires_at")
	o.RevokedAt = field.NewTime(table, "revoked_at")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *oauth2Code) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oauth2Code) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["code"] = o.Code
	o.fieldMap["client_id"] = o.ClientID
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["scope"] = o.Scope
	o.fieldMap["redirect_uri"] = o.RedirectURI
	o.fieldMap["expires_at"] = o.ExpiresAt
	o.fieldMap["revoked_at"] = o.RevokedAt
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o oauth2Code) clone(db *gorm.DB) oauth2Code {
	o.oauth2CodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oauth2Code) replaceDB(db *gorm.DB) oauth2Code {
	o.oauth2CodeDo.ReplaceDB(db)
	return o
}

type oauth2CodeDo struct{ gen.DO }

type IOauth2CodeDo interface {
	gen.SubQuery
	Debug() IOauth2CodeDo
	WithContext(ctx context.Context) IOauth2CodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOauth2CodeDo
	WriteDB() IOauth2CodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOauth2CodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOauth2CodeDo
	Not(conds ...gen.Condition) IOauth2CodeDo
	Or(conds ...gen.Condition) IOauth2CodeDo
	Select(conds ...field.Expr) IOauth2CodeDo
	Where(conds ...gen.Condition) IOauth2CodeDo
	Order(conds ...field.Expr) IOauth2CodeDo
	Distinct(cols ...field.Expr) IOauth2CodeDo
	Omit(cols ...field.Expr) IOauth2CodeDo
	Join(table schema.Tabler, on ...field.Expr) IOauth2CodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2CodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOauth2CodeDo
	Group(cols ...field.Expr) IOauth2CodeDo
	Having(conds ...gen.Condition) IOauth2CodeDo
	Limit(limit int) IOauth2CodeDo
	Offset(offset int) IOauth2CodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2CodeDo
	Unscoped() IOauth2CodeDo
	Create(values ...*model.Oauth2Code) error
	CreateInBatches(values []*model.Oauth2Code, batchSize int) error
	Save(values ...*model.Oauth2Code) error
	First() (*model.Oauth2Code, error)
	Take() (*model.Oauth2Code, error)
	Last() (*model.Oauth2Code, error)
	Find() ([]*model.Oauth2Code, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2Code, err error)
	FindInBatches(result *[]*model.Oauth2Code, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Oauth2Code) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOauth2CodeDo
	Assign(attrs ...field.AssignExpr) IOauth2CodeDo
	Joins(fields ...field.RelationField) IOauth2CodeDo
	Preload(fields ...field.RelationField) IOauth2CodeDo
	FirstOrInit() (*model.Oauth2Code, error)
	FirstOrCreate() (*model.Oauth2Code, error)
	FindByPage(offset int, limit int) (result []*model.Oauth2Code, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOauth2CodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oauth2CodeDo) Debug() IOauth2CodeDo {
	return o.withDO(o.DO.Debug())
}

func (o oauth2CodeDo) WithContext(ctx context.Context) IOauth2CodeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oauth2CodeDo) ReadDB() IOauth2CodeDo {
	return o.Clauses(dbresolver.Read)
}

func (o oauth2CodeDo) WriteDB() IOauth2CodeDo {
	return o.Clauses(dbresolver.Write)
}

func (o oauth2CodeDo) Session(config *gorm.Session) IOauth2CodeDo {
	return o.withDO(o.DO.Session(config))
}

func (o oauth2CodeDo) Clauses(conds ...clause.Expression) IOauth2CodeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oauth2CodeDo) Returning(value interface{}, columns ...string) IOauth2CodeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oauth2CodeDo) Not(conds ...gen.Condition) IOauth2CodeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oauth2CodeDo) Or(conds ...gen.Condition) IOauth2CodeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oauth2CodeDo) Select(conds ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oauth2CodeDo) Where(conds ...gen.Condition) IOauth2CodeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oauth2CodeDo) Order(conds ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oauth2CodeDo) Distinct(cols ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oauth2CodeDo) Omit(cols ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oauth2CodeDo) Join(table schema.Tabler, on ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oauth2CodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oauth2CodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oauth2CodeDo) Group(cols ...field.Expr) IOauth2CodeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oauth2CodeDo) Having(conds ...gen.Condition) IOauth2CodeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oauth2CodeDo) Limit(limit int) IOauth2CodeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oauth2CodeDo) Offset(offset int) IOauth2CodeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oauth2CodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOauth2CodeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oauth2CodeDo) Unscoped() IOauth2CodeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oauth2CodeDo) Create(values ...*model.Oauth2Code) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oauth2CodeDo) CreateInBatches(values []*model.Oauth2Code, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oauth2CodeDo) Save(values ...*model.Oauth2Code) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oauth2CodeDo) First() (*model.Oauth2Code, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Code), nil
	}
}

func (o oauth2CodeDo) Take() (*model.Oauth2Code, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Code), nil
	}
}

func (o oauth2CodeDo) Last() (*model.Oauth2Code, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Code), nil
	}
}

func (o oauth2CodeDo) Find() ([]*model.Oauth2Code, error) {
	result, err := o.DO.Find()
	return result.([]*model.Oauth2Code), err
}

func (o oauth2CodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth2Code, err error) {
	buf := make([]*model.Oauth2Code, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oauth2CodeDo) FindInBatches(result *[]*model.Oauth2Code, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oauth2CodeDo) Attrs(attrs ...field.AssignExpr) IOauth2CodeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oauth2CodeDo) Assign(attrs ...field.AssignExpr) IOauth2CodeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oauth2CodeDo) Joins(fields ...field.RelationField) IOauth2CodeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oauth2CodeDo) Preload(fields ...field.RelationField) IOauth2CodeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oauth2CodeDo) FirstOrInit() (*model.Oauth2Code, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Code), nil
	}
}

func (o oauth2CodeDo) FirstOrCreate() (*model.Oauth2Code, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth2Code), nil
	}
}

func (o oauth2CodeDo) FindByPage(offset int, limit int) (result []*model.Oauth2Code, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oauth2CodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oauth2CodeDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oauth2CodeDo) Delete(models ...*model.Oauth2Code) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oauth2CodeDo) withDO(do gen.Dao) *oauth2CodeDo {
	o.DO = *do.(*gen.DO)
	return o
}
